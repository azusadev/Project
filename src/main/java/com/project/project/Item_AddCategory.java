/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.project.project;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author reden
 */
public class Item_AddCategory extends javax.swing.JPanel {

    private boolean isOpen = false;
    private ArrayList<Item_AddMenu> menuList;

  
    private String categoryName;
    private JP_UpdateMenu parent;

    public String getCategoryName() {
        return categoryName;
    }
    
    public ArrayList<Item_AddMenu> getMenuList() {
        return menuList;
    }
    
    /**
     * Creates new form Item_AddCategory
     * @param p
     * @param name
     */  
    public Item_AddCategory(JP_UpdateMenu p, String name) {
        initComponents();
        this.menuList = new ArrayList<>();
        parent = p;
        categoryName = name;
        jl_categoryname.setText(name);
        jp_content.setVisible(false);
    }


    public void addMenu(String menuName, double price)
    {
        boolean found =false;
        for (int i = 0; i < menuList.size(); i++) {
            if(menuList.get(i).getMenuName().equals(menuName))
            {
                found = true;
                break;
            }
        }
        if(!found)
        {
            Item_AddMenu temp = new Item_AddMenu(this, menuName, price);
            jp_content.add(temp, 0);
            menuList.add(temp);
            for(JP_MenuCard mc : Database.mainMenu.getMenuCard())
            {
                if(mc.getCategoryName().equals(categoryName))
                {
                    mc.addMenuButton(menuName, price);
                    break;
                }
            }
            jp_content.repaint();
            jp_content.revalidate();
            for (int i = 0; i < Database.categories.size(); i++) {
                if(Database.categories.get(i).getName().equals(categoryName))
                {
                    Database.categories.get(i).getMenus().add(new MenuInfo(menuName, price));
                    break;
                }
            }
            Database.SaveToFile("Categories");
        }
        
    }
    
    private void Open()
    {
        jp_content.setVisible(isOpen);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jl_categoryname = new javax.swing.JLabel();
        edit = new javax.swing.JLabel();
        delete = new javax.swing.JLabel();
        jp_content = new javax.swing.JPanel();
        jp_addMenu = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel1.setBackground(new java.awt.Color(58, 85, 111));
        jPanel1.setMaximumSize(new java.awt.Dimension(1200, 50));
        jPanel1.setMinimumSize(new java.awt.Dimension(1200, 50));
        jPanel1.setPreferredSize(new java.awt.Dimension(1200, 50));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jl_categoryname.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jl_categoryname.setForeground(new java.awt.Color(255, 255, 255));
        jl_categoryname.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jl_categoryname.setText("Category Name");
        jl_categoryname.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jl_categorynameMouseReleased(evt);
            }
        });
        jPanel1.add(jl_categoryname, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 1080, 50));

        edit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        edit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edit-white.png"))); // NOI18N
        edit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                editMouseReleased(evt);
            }
        });
        jPanel1.add(edit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 0, 40, 50));

        delete.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete-white.png"))); // NOI18N
        delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                deleteMouseReleased(evt);
            }
        });
        jPanel1.add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 0, 40, 50));

        add(jPanel1);

        jp_content.setMaximumSize(new java.awt.Dimension(1200, 32767));
        jp_content.setMinimumSize(new java.awt.Dimension(0, 0));
        jp_content.setLayout(new javax.swing.BoxLayout(jp_content, javax.swing.BoxLayout.PAGE_AXIS));

        jp_addMenu.setBackground(new java.awt.Color(255, 255, 255));
        jp_addMenu.setMaximumSize(new java.awt.Dimension(1200, 40));
        jp_addMenu.setMinimumSize(new java.awt.Dimension(1200, 40));
        jp_addMenu.setPreferredSize(new java.awt.Dimension(1200, 40));
        jp_addMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jp_addMenuMouseReleased(evt);
            }
        });
        jp_addMenu.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("+ Add Menu");
        jp_addMenu.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 1, 665, 40));

        jp_content.add(jp_addMenu);

        add(jp_content);
    }// </editor-fold>//GEN-END:initComponents

    private void jp_addMenuMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jp_addMenuMouseReleased
        // TODO add your handling code here:
       
        try {
             JOP_Menu tempMenu = new JOP_Menu();
            int value = JOptionPane.showConfirmDialog(SwingUtilities.getWindowAncestor(this),
                            tempMenu,
                            "Add Menu",
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE);

            if(value == JOptionPane.OK_OPTION && !tempMenu.menuName.getText().isEmpty() && !tempMenu.menuPrice.getText().isEmpty())
            {
                addMenu(tempMenu.menuName.getText(), Double.parseDouble(tempMenu.menuPrice.getText()));
                
            }

        } catch (Exception e) {
        }
    }//GEN-LAST:event_jp_addMenuMouseReleased

    private void jl_categorynameMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jl_categorynameMouseReleased
        // TODO add your handling code here:
        isOpen = !isOpen;
        Open();
    }//GEN-LAST:event_jl_categorynameMouseReleased

    private void deleteMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteMouseReleased
        // TODO add your handling code here:
        parent.removeCategory(this);
       
    }//GEN-LAST:event_deleteMouseReleased

    private void editMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editMouseReleased
        // TODO add your handling code here:
        try {
            JOP_Category tempCategory = new JOP_Category();
            tempCategory.categoryName.setText(categoryName);
            int value = JOptionPane.showConfirmDialog(SwingUtilities.getWindowAncestor(this),
                            tempCategory,
                            "Edit Category",
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.PLAIN_MESSAGE);

            if(value == JOptionPane.OK_OPTION && !tempCategory.categoryName.getText().isEmpty())
            {
                for (int i = 0; i < Database.categories.size(); i++) {
                    if(Database.categories.get(i).getName().equals(categoryName))
                    {
                        Database.categories.get(i).setName(tempCategory.categoryName.getText());
                        break;
                    }
                }
                
                Database.mainMenu.editCategory(categoryName, tempCategory.categoryName.getText());
                categoryName = tempCategory.categoryName.getText();
                jl_categoryname.setText(categoryName);
                for(Item_AddMenu m : menuList)
                {
                    m.setCategoryName(categoryName);
                }
           
            }

        } catch (Exception e) {
        }
    }//GEN-LAST:event_editMouseReleased

    public void removeMenu(Item_AddMenu menu)
    {
        if(menuList.contains(menu))
        {
            System.out.println("FOUND MENU!");
            menuList.remove(menu);
            jp_content.remove(menu);
            jp_content.repaint();
            jp_content.revalidate();
            for (int i = 0; i < Database.categories.size(); i++) {
            if(Database.categories.get(i).getName().equals(categoryName))
            {
                for (int j = 0; j < Database.categories.get(i).getMenus().size(); j++) {
                    if( Database.categories.get(i).getMenus().get(j).getName().equals(menu.getMenuName()))
                    {
                        Database.categories.get(i).getMenus().remove(Database.categories.get(i).getMenus().get(j));
                        break;
                    }
                }
                break;
                }
            }
            for (int i = 0; i < Database.mainMenu.getMenuCard().size(); i++) {
                if(Database.mainMenu.getMenuCard().get(i).getCategoryName().equals(menu.getCategoryName()))
                {
                    Database.mainMenu.getMenuCard().get(i).removeMenuButton(menu.getMenuName());
                    break;
                }
            }
            Database.SaveToFile("Categories");
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel delete;
    private javax.swing.JLabel edit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jl_categoryname;
    private javax.swing.JPanel jp_addMenu;
    private javax.swing.JPanel jp_content;
    // End of variables declaration//GEN-END:variables
}
